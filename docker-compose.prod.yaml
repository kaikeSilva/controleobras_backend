services:
  # =============================================================================
  # PDF SERVICE - Microserviço para geração de PDFs
  # =============================================================================
  pdf-service:
    build: ./pdf-service
    image: controleobras-pdf:latest
    container_name: pdf-service-prod
    restart: unless-stopped
    networks: [app-network]
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://localhost:3000/health"]
      interval: 30s
      retries: 3

  # =============================================================================
  # NGINX - Reverse Proxy e Servidor Web
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/entrypoint.sh:/entrypoint.sh:ro
    depends_on:
      php:
        condition: service_healthy
    networks:
      - app-network
    command: ["/entrypoint.sh", "nginx", "-g", "daemon off;"]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # PHP-FPM - Aplicação Laravel
  # =============================================================================
  php:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: php          #  ⬅️  aqui
      args:
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    image: ${APP_NAME:-laravel}-app:latest
    container_name: php-app-prod
    restart: always
    env_file:
      - .env.production
    environment:
      - CONTAINER_ROLE=app
    volumes:
      - app_storage:/var/www/storage
      - app_bootstrap:/var/www/bootstrap/cache
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "sh", "-c", "ps aux | grep '[p]hp-fpm' | head -1"]  # Verifica se processo está rodando
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # =============================================================================
  # WEBSOCKET - Laravel Reverb
  # =============================================================================
  websocket:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: php
      args:
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    image: ${APP_NAME:-laravel}-websocket:latest
    container_name: websocket-prod
    restart: always
    env_file:
      - .env.production
    environment:
      - CONTAINER_ROLE=websocket
    ports:
      - "6001:6001"
    volumes:
      - app_storage:/var/www/storage
      - app_bootstrap:/var/www/bootstrap/cache
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      php:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "netcat", "-z", "localhost", "6001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # QUEUE WORKER - Processamento de Filas
  # =============================================================================
  queue:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: php
      args:
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    image: ${APP_NAME:-laravel}-queue:latest
    container_name: queue-prod
    restart: always
    env_file:
      - .env.production
    environment:
      - CONTAINER_ROLE=queue
      - QUEUE_NAMES=pdf,default
    volumes:
      - app_storage:/var/www/storage
      - app_bootstrap:/var/www/bootstrap/cache
      - ./queue-logs:/var/www/storage/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      php:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "pgrep", "-f", "queue:work"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # =============================================================================
  # SCHEDULER - Laravel Cron Jobs
  # =============================================================================
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: php
      args:
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    image: ${APP_NAME:-laravel}-scheduler:latest
    container_name: scheduler-prod
    restart: always
    env_file:
      - .env.production
    environment:
      - CONTAINER_ROLE=scheduler
    volumes:
      - app_storage:/var/www/storage
      - app_bootstrap:/var/www/bootstrap/cache
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      php:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # MYSQL DATABASE
  # =============================================================================
  db:
    image: mysql:8.0
    container_name: mysql-prod
    restart: always
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_ROOT_PASSWORD=secret
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network
    command: >
      --default-authentication-plugin=mysql_native_password
      --bind-address=0.0.0.0
      --innodb-buffer-pool-size=256M
      --max-connections=100
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-psecret"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # REDIS - Cache e Sessões
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    restart: always
    environment:
      - REDIS_PASSWORD=secret
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: ["redis-server", "--requirepass", "secret", "--maxmemory", "128mb", "--maxmemory-policy", "allkeys-lru"]
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "secret", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

# =============================================================================
# VOLUMES - Dados Persistentes
# =============================================================================
volumes:
  db_data:
  redis_data:
  app_storage:
  app_bootstrap:

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  app-network:
    driver: bridge

# comandos
# docker compose -f docker-compose.prod.yaml build --no-cache
# docker compose -f docker-compose.prod.yaml up -d
# docker compose -f docker-compose.prod.yaml down

# comando especifico para subir container especifico do php
# docker compose -f docker-compose.prod.yaml build --no-cache php
# docker compose -f docker-compose.prod.yaml up -d php queue scheduler websocket
