# Dockerfile.production
# ==================================================
# Stage 1: PHP-FPM + Laravel app (builder + runtime)
# ==================================================
FROM php:8.4-fpm AS php

# --- 1) Variáveis de ambiente e argumentos para usuário
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome \
    HOME=/home/appuser \
    PORT=8000

ARG USER_ID=1000
ARG GROUP_ID=1000

# --- 2) Dependências do sistema (inclui libs do Chrome, zip, unzip, netcat)
RUN apt-get update \
    && apt-get install -y \
        wget gnupg ca-certificates curl unzip sudo procps netcat-openbsd \
        fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 \
        libcups2 libdbus-1-3 libdrm2 libgbm1 libglib2.0-0 libgtk-3-0 libnspr4 \
        libnss3 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
        libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 \
        libxss1 libxtst6 xdg-utils libpq-dev libcurl4-gnutls-dev libzip-dev zip \
        cron supervisor default-mysql-client \
    && rm -rf /var/lib/apt/lists/*

# --- 3) Chrome estável para Puppeteer
RUN wget -q -O /tmp/chrome-key.pub https://dl.google.com/linux/linux_signing_key.pub \
    && gpg --dearmor < /tmp/chrome-key.pub > /etc/apt/trusted.gpg.d/google-chrome.gpg \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" \
        > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/* /tmp/chrome-key.pub

# --- 4) Node.js (para eventuais tasks de asset)
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# --- 4.1) Runtime do Puppeteer para o Browsershot  ----------------------------
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1
RUN npm install -g --unsafe-perm puppeteer@^22.0.0


# --- 5) Extensões PHP + Redis
RUN docker-php-ext-install pdo pdo_mysql bcmath pcntl zip \
    && pecl install -o -f redis \
    && rm -rf /tmp/pear \
    && docker-php-ext-enable redis

# --- 6) Criar usuário não-root
RUN groupadd -g ${GROUP_ID} appuser \
    && useradd -u ${USER_ID} -g appuser -m -s /bin/bash appuser \
    && echo 'appuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \
    && mkdir -p /home/appuser/.local/share \
    && chown -R appuser:appuser /home/appuser \
    && install -d -m 0755 -o appuser -g appuser /home/appuser/.cache/puppeteer \
    && install -d -m 0700 -o appuser -g appuser /home/appuser/.config

# --- 7) Configurar PHP-FPM para usuário não-root
RUN sed -i 's/user = www-data/user = appuser/g' /usr/local/etc/php-fpm.d/www.conf \
    && sed -i 's/group = www-data/group = appuser/g' /usr/local/etc/php-fpm.d/www.conf \
    && sed -i 's/listen.owner = www-data/listen.owner = appuser/g' /usr/local/etc/php-fpm.d/www.conf \
    && sed -i 's/listen.group = www-data/listen.group = appuser/g' /usr/local/etc/php-fpm.d/www.conf

WORKDIR /var/www

# --- 8) Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# --- 9) Código da aplicação, deps PHP, key e cache
COPY . .

# --- 10) Configurar aplicação Laravel
RUN if [ ! -f .env ]; then cp .env.example .env; fi \
    && composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader \
    && php artisan key:generate --ansi --no-interaction \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache \
    && chown -R appuser:appuser /var/www \
    && chmod -R 775 storage bootstrap/cache \
    && chmod +x docker/entrypoint.prod.sh

# --- 11) Copiar e configurar entrypoint script  
COPY docker/entrypoint.prod.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# --- 12) Configurar usuário final
USER appuser

# --- 13) Entrypoint e exposição de porta
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
EXPOSE 9000

# ======================================
# Stage 2: Node.js para frontend / testes
# ======================================
FROM node:22-alpine AS node

# instalar cross-env globalmente
USER root
RUN npm install --global cross-env

# criar usuário não-root se necessário
ARG USER_ID=1000
ARG GROUP_ID=1000

RUN if [ "$USER_ID" != "1000" ] || [ "$GROUP_ID" != "1000" ]; then \
        addgroup -g ${GROUP_ID} appgroup && \
        adduser -u ${USER_ID} -S appuser -G appgroup; \
    fi

WORKDIR /var/www

# deps JS
COPY package.json package-lock.json* ./
RUN npm install

# código restante e permissões
COPY . .
RUN chown -R ${USER_ID}:${GROUP_ID} /var/www

# para rodar build/tests JS, adicione aqui (ex: RUN npm run build)
USER ${USER_ID}